{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "04946641-30d8-4906-801e-072b8c87dd07",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "pybullet build time: Jan 29 2025 23:17:20\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import pandas as pd\n",
    "\n",
    "from datasets import Dataset\n",
    "from transformers import AutoTokenizer, AutoModelForCausalLM\n",
    "from trl import RLOOConfig, RLOOTrainer\n",
    "from llarm.src.environment import Base\n",
    "from llarm.src.utility import PyBulletContext\n",
    "from threading import Thread, Event\n",
    "from llarm.src.workflow.core import WorkflowFunctionSignatureFormatter\n",
    "from time import sleep\n",
    "from os import environ\n",
    "from math import log, sqrt, acos, exp\n",
    "from numpy import array\n",
    "from asyncio import run\n",
    "from pybullet import saveState, restoreState\n",
    "import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0d208bba-002e-4fb2-b9e1-80c8feef0c70",
   "metadata": {},
   "outputs": [],
   "source": [
    "#device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n",
    "model_name = \"Qwen/Qwen3-0.6B\"\n",
    "#model_name = \"Qwen/Qwen3-4B-Instruct-2507\"\n",
    "\n",
    "#tokenizer = AutoTokenizer.from_pretrained(model_name, cache_dir=\"/tf/llms/\")\n",
    "#tokenizer.pad_token = tokenizer.eos_token\n",
    "    \n",
    "#model = AutoModelForCausalLM.from_pretrained(model_name, cache_dir=\"/tf/llms/\")\n",
    "#model = model.to(device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b8270745-a291-42b3-9489-17837f685a14",
   "metadata": {},
   "outputs": [],
   "source": [
    " # Training\n",
    "training_args = RLOOConfig(\n",
    "    output_dir=\"Qwen3-0.6B-RLOO\",\n",
    "    learning_rate=1e-5,\n",
    "    log_completions=True,\n",
    "    num_completions_to_print=1,\n",
    "    logging_strategy=\"steps\",\n",
    "    logging_steps=1,\n",
    "    eval_steps=1,\n",
    "    save_strategy=\"no\",\n",
    "    max_steps=1,\n",
    "    gradient_accumulation_steps=1,\n",
    "    steps_per_generation=2,\n",
    "    use_vllm=False,\n",
    "    run_name=\"Qwen3-0.6B-RLOO-Test\",\n",
    "\n",
    "    max_prompt_length=1024,\n",
    "    max_completion_length=2048,\n",
    "    temperature=0.6,\n",
    "    top_p=0.95,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3410ab84-ae12-4931-adc1-7e03a1d3fc34",
   "metadata": {},
   "outputs": [],
   "source": [
    "time_step = int(environ.get(\"TIME_STEP\", \"240\"))\n",
    "\n",
    "class LiftObjectRewarder:\n",
    "    def __init__(\n",
    "            self,\n",
    "            object,\n",
    "            xy_delta_threshold=0.01,\n",
    "            xy_delta_weight=1,\n",
    "            z_delta_weight=1,\n",
    "            orientation_weight=1,\n",
    "            orientation_threshold=0.01,\n",
    "    ):\n",
    "        self.__object = object\n",
    "        self.__reward = None\n",
    "        self.__xy_delta_threshold = xy_delta_threshold\n",
    "        self.__xy_delta_weight = xy_delta_weight\n",
    "        self.__z_delta_weight = z_delta_weight\n",
    "        self.__orientation_weight = orientation_weight\n",
    "        self.__orientation_threshold = orientation_threshold\n",
    "\n",
    "    @property\n",
    "    def reward(self):\n",
    "        return self.__reward\n",
    "\n",
    "    def register(self, workflow_manager):\n",
    "        workflow_manager.event_listeners.before_execute.register(self.__before_execute)\n",
    "        workflow_manager.event_listeners.after_execute.register(self.__after_execute)\n",
    "\n",
    "    def __before_execute(self, *args, **kwargs):\n",
    "        self.__position = self.__object.position\n",
    "        self.__orientation = self.__object.quaternion_orientation\n",
    "\n",
    "    def __after_execute(self, *args, **kwargs):\n",
    "        position_delta_reward = self.__reward_position_delta(\n",
    "            self.__object.position,\n",
    "            self.__position,\n",
    "        )\n",
    "        orientation_delta_reward = self.__reward_orientation_delta(\n",
    "            self.__object.quaternion_orientation,\n",
    "            self.__orientation,\n",
    "        )\n",
    "        total_reward = position_delta_reward + orientation_delta_reward\n",
    "\n",
    "        self.__reward = {\n",
    "            \"position_delta_reward\": position_delta_reward,\n",
    "            \"orientation_delta_reward\": orientation_delta_reward\n",
    "        }\n",
    "\n",
    "    def __reward_position_delta(self, position_from, position_to):\n",
    "        position_delta = array(position_from) - position_to\n",
    "\n",
    "        xy_delta_reward = 0\n",
    "        if self.__xy_delta_threshold >= sqrt(position_delta[0] ** 2 + position_delta[1] ** 2):\n",
    "            xy_delta_reward = 1\n",
    "\n",
    "        z_delta_reward = sqrt(position_delta[2])\n",
    "\n",
    "        return self.__z_delta_weight * z_delta_reward + self.__xy_delta_weight * xy_delta_reward\n",
    "\n",
    "    def __reward_orientation_delta(self, orientation_from, orientation_to):\n",
    "        dot = min(\n",
    "            1.0,\n",
    "            max(\n",
    "                -1,0,\n",
    "                abs(\n",
    "                    orientation_from[0] * orientation_to[0] +\n",
    "                    orientation_from[1] * orientation_to[1] +\n",
    "                    orientation_from[2] * orientation_to[2] +\n",
    "                    orientation_from[3] * orientation_to[3]\n",
    "                )\n",
    "            )\n",
    "        )\n",
    "\n",
    "        angle = 2.0 * acos(dot)\n",
    "\n",
    "        score = exp(-angle / self.__orientation_threshold)\n",
    "\n",
    "        return self.__orientation_weight * score\n",
    "\n",
    "def formatting_prompts_func(base, example):\n",
    "    return [\n",
    "        {\n",
    "            \"role\": \"system\",\n",
    "            \"content\": \"\"\"\n",
    "You are a Python 3 code generator. You are the controller of an robotic arm, that uses Python for interaction.\n",
    "Please write and call your written Python 3 function with the name main for the command. \n",
    "Provide the code using python``` and ```.\n",
    "\n",
    "Output:\n",
    "python```\n",
    "def main():\n",
    "    # Call functions here\n",
    "\n",
    "main()\n",
    "```\n",
    "\n",
    "Use only the provided functions.\n",
    "Functions:\n",
    "{functions_prompt}\"\"\".format(\n",
    "                functions_prompt=\"\\n\".join(\n",
    "                    map(\n",
    "                        WorkflowFunctionSignatureFormatter().format,\n",
    "                        [*base.workflow_manager.functions.functions],\n",
    "                    )\n",
    "                ),\n",
    "            )\n",
    "        },\n",
    "        {\n",
    "            \"role\": \"user\",\n",
    "            \"content\": \"\"\"\n",
    "World:\n",
    "{world_prompt}\n",
    "\n",
    "Intention:\n",
    "{example}\"\"\".format(\n",
    "                world_prompt=base.world_manager.format_prompt_specification(),\n",
    "                example=example,\n",
    "            )\n",
    "        }\n",
    "    ]\n",
    "\n",
    "def get_prompts(base):\n",
    "    return list(\n",
    "        map(\n",
    "            lambda prompt: {\"prompt\": formatting_prompts_func(base, prompt), \"method_args\": {\"color\": \"red\"}},\n",
    "            [\"Pick red\", \"Pick red\", \"Pick red\", \"Pick red\", \"Pick red\", \"Pick red\", \"Pick red\", \"Pick red\", \"Pick red\", \"Pick red\", \"Pick green\", \"Pick blue\"],\n",
    "        )\n",
    "    )\n",
    "\n",
    "def extract_with_marker(output):\n",
    "    marker = \"```\"\n",
    "\n",
    "    left_markers = [marker + \"python3\", marker + \"python\", marker]\n",
    "    right_marker = marker\n",
    "\n",
    "    output = output.strip(\"\\n\\r \")\n",
    "\n",
    "    start = None\n",
    "    start_padding = None\n",
    "\n",
    "    for left_marker in left_markers:\n",
    "        index = output.find(left_marker)\n",
    "\n",
    "        if index < 0:\n",
    "            continue\n",
    "\n",
    "        start = index\n",
    "        start_padding = len(left_marker)\n",
    "\n",
    "        break\n",
    "\n",
    "    if start is None:\n",
    "        return None\n",
    "\n",
    "    end = output.find(right_marker, start + start_padding)\n",
    "    if end < 0:\n",
    "        end = len(output)\n",
    "\n",
    "    if end is None:\n",
    "        return None\n",
    "\n",
    "    return output[start + start_padding:end]\n",
    "\n",
    "from pandas import DataFrame\n",
    "\n",
    "def format_system_role_content():\n",
    "    return \"\"\"\n",
    "You are a Python 3 code generator. You are the controller of an robotic arm, that uses Python for interaction.\n",
    "Please write and call your written Python 3 function with the name main for the command. \n",
    "Provide the code using python``` and ```.\n",
    "\n",
    "Output:\n",
    "python```\n",
    "def main():\n",
    "    # Call functions here\n",
    "\n",
    "main()\n",
    "```\n",
    "\n",
    "Use only the provided functions.\n",
    "Functions:\n",
    "{functions_prompt}\"\"\".format(\n",
    "    functions_prompt=\"\\n\".join(\n",
    "        map(\n",
    "            WorkflowFunctionSignatureFormatter().format,\n",
    "            [*base.workflow_manager.functions.functions],\n",
    "        )\n",
    "    ),\n",
    ")\n",
    "    \n",
    "def format_user_role_content(intention, objects):\n",
    "    return \"\"\"\n",
    "World:\n",
    "{world_prompt}\n",
    "\n",
    "Intention:\n",
    "{intention}\"\"\".format(\n",
    "    world_prompt=\"\\n\".join(\n",
    "        map(\n",
    "            lambda object: \"{name} [{tags}] ({dimension}; {center_position})\\n\".format(\n",
    "                name=\"cube\",\n",
    "                tags=\", \".join([object[\"color\"]]),\n",
    "                dimension=[object[\"size\"], object[\"size\"], object[\"size\"]],\n",
    "                center_position=object[\"position\"],\n",
    "            ),\n",
    "            objects,\n",
    "        ),\n",
    "    ),\n",
    "    intention=intention,\n",
    ")\n",
    "\n",
    "def format_prompt(intention, objects):\n",
    "    return [\n",
    "        {\n",
    "            \"role\": \"system\",\n",
    "            \"content\": format_system_role_content(),\n",
    "        },\n",
    "        {\n",
    "            \"role\": \"user\",\n",
    "            \"content\": format_user_role_content(intention, objects),\n",
    "        }\n",
    "    ]\n",
    "\n",
    "def generate_train_dataset():\n",
    "    verbs = [\n",
    "        \"Lift {}\", \"Pick {}\", \"Take {}\", \"Grab {}\", \"Raise {}\",\n",
    "        \"Hoist {}\", \"Fetch {}\", \"Collect {}\", \"Retrieve {}\", \"Grasp {}\",\n",
    "        \"Seize {}\", \"Get {}\", \"Acquire {}\", \"Carry {}\", \"Hold {}\",\n",
    "    ]\n",
    "    data = []\n",
    "\n",
    "    for verb in verbs:\n",
    "        for _i in range(1):\n",
    "            colors = [\n",
    "                \"red\",\n",
    "                \"blue\",\n",
    "                \"green\",\n",
    "            ]\n",
    "            random.shuffle(colors)\n",
    "            \n",
    "            objects = []\n",
    "            object_size = 0.07\n",
    "            maximum_attemps = 100\n",
    "            \n",
    "            for i in range(random.randrange(1, 4)):\n",
    "                placed = False\n",
    "\n",
    "                for _ in range(maximum_attemps):\n",
    "                    x = round(random.uniform(-0.35, 0.1), 2)\n",
    "                    y = round(random.uniform(-0.55, 0.55), 2)\n",
    "\n",
    "                    intersection = False\n",
    "\n",
    "                    for object in objects:\n",
    "                        if (x - object[\"position\"][0]) ** 2 + (y - object[\"position\"][1]) ** 2 < object_size:\n",
    "                            intersection = True\n",
    "                            break\n",
    "    \n",
    "                    if intersection is False:\n",
    "                        placed = True\n",
    "\n",
    "                if placed:\n",
    "                    objects.append(\n",
    "                        {\n",
    "                            \"position\": [x, y, 0.66],\n",
    "                            \"color\": colors[i],\n",
    "                            \"size\": object_size,\n",
    "                        },\n",
    "                    )\n",
    "\n",
    "            intention = verb.format(colors[0])\n",
    "            \n",
    "            data.append({\n",
    "                \"method_args\": {\n",
    "                    \"objects\": objects,\n",
    "                    \"intention_verb\": verb,\n",
    "                    \"intention_object\": colors[0],\n",
    "                    \"intention\": intention,\n",
    "                },\n",
    "                \"prompt\": format_prompt(intention, objects),\n",
    "            })\n",
    "            \n",
    "    return DataFrame(data)\n",
    "\n",
    "def calculate_reward(state, base, llm_completion0, **kwargs):\n",
    "    restoreState(state)\n",
    "    \n",
    "    object_color = kwargs[\"color\"]\n",
    "    rewarder = LiftObjectRewarder(base.world_manager.query_objects(\"cube\", [object_color])[0])\n",
    "    rewarder.register(base.workflow_manager)\n",
    "\n",
    "    llm_completion = extract_with_marker(llm_completion0)\n",
    "    \n",
    "    if llm_completion is None:\n",
    "        return -1.0\n",
    "    \n",
    "    event = Event()\n",
    "    \n",
    "    def evaluate():\n",
    "        try:\n",
    "            print(\"start\")\n",
    "            run(base.workflow_manager.execute(llm_completion))\n",
    "            print(\"finish\")\n",
    "        except Exception as e:\n",
    "            print(e)\n",
    "        finally:\n",
    "            event.set()\n",
    "    \n",
    "    def update():\n",
    "        while not event.is_set():\n",
    "            base.update()\n",
    "    \n",
    "    evaluate_thread = Thread(target=evaluate)\n",
    "    evaluate_thread.start()\n",
    "    \n",
    "    update_thread = Thread(target=update)\n",
    "    update_thread.start()\n",
    "\n",
    "    evaluate_thread.join()\n",
    "    update_thread.join()\n",
    "\n",
    "    if rewarder.reward is None:\n",
    "        return 0.0\n",
    "\n",
    "    return rewarder.reward[\"position_delta_reward\"] + rewarder.reward[\"orientation_delta_reward\"]\n",
    "\n",
    "def reward_function(completions, prompts, method_args, **kwargs):\n",
    "    rewards = []\n",
    "    for i, (compl, args) in enumerate(zip(completions, method_args)):\n",
    "        if compl:\n",
    "            reward = calculate_reward(state, base, compl, **args)\n",
    "        else:\n",
    "            reward = 0\n",
    "        rewards.append(reward)\n",
    "        #print(compl)\n",
    "\n",
    "        #print(prompts[i])\n",
    "        print(f\"[Reward Debug] | Completion: {compl!r} | \"\n",
    "              f\"Target: {args} | Reward: {reward}\\n\")\n",
    "    return rewards\n",
    "\n",
    "def reward_step(completion, prompt, method_args):\n",
    "    pass\n",
    "\n",
    "def reward(completions, prompts, method_args, **kwargs):\n",
    "    rewards = []\n",
    "\n",
    "    print(len(completions))\n",
    "    print(\"##########################\")\n",
    "    print(len(prompts))\n",
    "    print(\"$$$$$$$$$$$$$$$$$$$$$$$$$$$\")\n",
    "    print(len(method_args))\n",
    "    \n",
    "    for completion in completions:\n",
    "        rewards.append(0)\n",
    "        \n",
    "    return rewards"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9ddcb659-e247-4b31-8608-956f037b09a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "from transformers import AutoProcessor, AutoModelForVision2Seq\n",
    "from transformers import LlavaNextProcessor, LlavaNextForConditionalGeneration\n",
    "import torch\n",
    "\n",
    "#model_id = \"llava-hf/llava-1.6-mistral-7b-hf\"\n",
    "#processor = AutoProcessor.from_pretrained(model_id)\n",
    "#model = AutoModelForVision2Seq.from_pretrained(model_id, torch_dtype=torch.float16, device_map=\"auto\")\n",
    "\n",
    "#processor = LlavaNextProcessor.from_pretrained(\"llava-hf/llava-v1.6-mistral-7b-hf\")\n",
    "#model = LlavaNextForConditionalGeneration.from_pretrained(\"llava-hf/llava-v1.6-mistral-7b-hf\", torch_dtype=torch.float16, low_cpu_mem_usage=True) \n",
    "#model.to(\"cuda:0\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "82a6cb67-b1dd-459f-8411-45814d7b99d6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'tags': ['table', 'brown', 'surface'], 'position': [100, 150], 'size': [260, 120]}\n",
      "100 150 360 270\n",
      "{'tags': ['figure', 'blue', 'orange', 'person'], 'position': [240, 60], 'size': [60, 170]}\n",
      "240 60 300 230\n",
      "{'tags': ['cube', 'blue'], 'position': [270, 125], 'size': [18, 18]}\n",
      "270 125 288 143\n",
      "{'tags': ['cube', 'green'], 'position': [270, 145], 'size': [18, 18]}\n",
      "270 145 288 163\n",
      "{'tags': ['cube', 'red'], 'position': [270, 165], 'size': [18, 18]}\n",
      "270 165 288 183\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "with PyBulletContext(False):\n",
    "    base = Base([])\n",
    "    state = saveState()\n",
    "\n",
    "    train_dataset = generate_train_dataset()\n",
    "    #train_dataset['prompt'] =  train_dataset['prompt'].apply(\n",
    "    #    lambda prompt: tokenizer.apply_chat_template(\n",
    "    #        prompt,\n",
    "    #        tokenize=False,\n",
    "    #        add_generation_prompt=True,\n",
    "    #    )\n",
    "    #)\n",
    "    \n",
    "    for i in range(1):#range(len(train_dataset['method_args'])):\n",
    "        base.reload_objects(train_dataset['method_args'][i]['objects'])\n",
    "\n",
    "        from PIL import Image, ImageDraw\n",
    "        from io import BytesIO\n",
    "        from base64 import b64encode\n",
    "\n",
    "        \n",
    "\n",
    "        width = 640\n",
    "        height = 480\n",
    "        \n",
    "        image = base.create_overview_image(width=640, height=480)\n",
    "        img = Image.fromarray(image)\n",
    "        buffer = BytesIO()\n",
    "        img.save(buffer, format=\"JPEG\")\n",
    "        img_base64 = b64encode(buffer.getvalue()).decode(\"utf-8\")\n",
    "\n",
    "        image_data = f\"data:image/jpeg;base64,{img_base64}\"\n",
    "\n",
    "        text = \"\"\"A robotic gripper arm had the following task:\n",
    "{}\n",
    "\n",
    "Please answer with 'yes' or 'no' only, whether the robotic arm addressed the intention correctly.\"\"\".format(\n",
    "            train_dataset['method_args'][i][\"intention\"]\n",
    "        )\n",
    "\n",
    "        text = \"\"\"Please describe the visible objects regarding their 2D-coordinate, their 2D-size and their properties (tags; position; size) formatted as JSON.\n",
    "The origin is at the top-left corner.\n",
    "        \n",
    "Example:\n",
    "[{\"tags\": [\"red\", \"sphere\"], \"position\": [200, 300], \"size\": [30, 40]}]\n",
    "        \"\"\"\n",
    "\n",
    "        if True:\n",
    "            response = client.chat.completions.create(\n",
    "                model=\"gpt-5-nano\",\n",
    "                messages=[\n",
    "                    {\n",
    "                        \"role\": \"user\",\n",
    "                        \"content\": [\n",
    "                            {\"type\": \"text\", \"text\": text},\n",
    "                            {\"type\": \"image_url\", \"image_url\": {\"url\": image_data}},\n",
    "                        ]\n",
    "                    }\n",
    "                ]\n",
    "            )\n",
    "\n",
    "            from json import loads\n",
    "\n",
    "            draw = ImageDraw.Draw(img)\n",
    "\n",
    "            line_width=1\n",
    "            line_color=\"blue\"\n",
    "            \n",
    "            grid_size = 100\n",
    "            \n",
    "            for x in range(0, width, grid_size):\n",
    "                draw.line([(x, 0), (x, height)], fill=line_color, width=line_width)\n",
    "\n",
    "            # Horizontale Linien\n",
    "            for y in range(0, height, grid_size):\n",
    "                draw.line([(0, y), (width, y)], fill=line_color, width=line_width)\n",
    "            \n",
    "            for object in loads(response.choices[0].message.content.strip()):\n",
    "                print(object)\n",
    "\n",
    "                print(\n",
    "                        object[\"position\"][0],\n",
    "                        object[\"position\"][1],\n",
    "                        object[\"position\"][0] + object[\"size\"][0],\n",
    "                        object[\"position\"][1] + object[\"size\"][1]\n",
    "                )\n",
    "                \n",
    "                draw.rectangle(\n",
    "                    (\n",
    "                        object[\"position\"][0],\n",
    "                        object[\"position\"][1],\n",
    "                        object[\"position\"][0] + object[\"size\"][0],\n",
    "                        object[\"position\"][1] + object[\"size\"][1]\n",
    "                    ),\n",
    "                    outline=\"red\",\n",
    "                    width=1\n",
    "                )\n",
    "\n",
    "            from numpy import array\n",
    "\n",
    "            image = array(img)\n",
    "                \n",
    "        if False:\n",
    "            conversation = [\n",
    "                {\n",
    "            \n",
    "                  \"role\": \"user\",\n",
    "                  \"content\": [\n",
    "                      {\"type\": \"text\", \"text\": text},#\"What is shown in this image?\"},\n",
    "                      {\"type\": \"image\"},\n",
    "                    ],\n",
    "                },\n",
    "            ]\n",
    "            prompt = processor.apply_chat_template(conversation, add_generation_prompt=True)\n",
    "            \n",
    "            inputs = processor(images=img, text=prompt, return_tensors=\"pt\").to(\"cuda:0\")\n",
    "            \n",
    "            # autoregressively complete prompt\n",
    "            output = model.generate(**inputs, max_new_tokens=100)\n",
    "            \n",
    "            print(processor.decode(output[0], skip_special_tokens=True))\n",
    "        \n",
    "        base.show_image(image)\n",
    "        #base.show_image(base.create_overview_image())\n",
    "    \n",
    "    #trainer = RLOOTrainer(\n",
    "    #    model=model,\n",
    "    #    args=training_args,\n",
    "    #    reward_funcs=[reward],\n",
    "    #    train_dataset=Dataset.from_pandas(train_dataset),\n",
    "    #    #eval_dataset=eval_dataset,\n",
    "    #    processing_class=tokenizer\n",
    "    #)\n",
    "\n",
    "    #trainer.train()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "190d71a5-9789-4ec9-a2bb-b47f79927a23",
   "metadata": {},
   "outputs": [],
   "source": [
    "#print(train_dataset_df.iloc[0]['prompt'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "605fa288-cda9-452b-af91-5ba6c308d6a5",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#trainer.state.log_history"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "84ac00e6-4b8f-471e-b9cf-4cc24f236d29",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "TRL venv",
   "language": "python",
   "name": "trl-venv"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.0rc1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
